import{_ as t,o as e,c as d,X as o}from"./chunks/framework.319defb2.js";const f=JSON.parse('{"title":"命令行接口 (CLI)","description":"命令行接口-Stencil CLI","frontmatter":{"description":"命令行接口-Stencil CLI"},"headers":[],"relativePath":"docs/config/cli.md","filePath":"docs/config/cli.md"}'),c={name:"docs/config/cli.md"},r=o('<h1 id="命令行接口-cli" tabindex="-1">命令行接口 (CLI) <a class="header-anchor" href="#命令行接口-cli" aria-label="Permalink to &quot;命令行接口 (CLI)&quot;">​</a></h1><h2 id="stencil-build" tabindex="-1"><code id="stencil-build">stencil build</code> <a class="header-anchor" href="#stencil-build" aria-label="Permalink to &quot;`stencil build`{#stencil-build}&quot;">​</a></h2><p>生成一个 Stencil 项目。下面的标志是 <code>build</code> 命令的可用选项。</p><table><thead><tr><th>Flag</th><th>描述</th><th>别名</th></tr></thead><tbody><tr><td><code>--ci</code></td><td>Run a build using recommended settings for a Continuous Integration (CI) environment. Defaults the number of workers to 4, allows for extra time if taking screenshots via the tests and modifies the console logs.</td><td>-</td></tr><tr><td><code>--config</code></td><td><code>stenccil.config.ts</code> 文件的路径。这个标志在大多数情况下是不需要的，因为 Stencil 会找到配置。另外，Stencil 配置不是必须的。</td><td><code>-c</code></td></tr><tr><td><code>--debug</code></td><td>Adds additional runtime code to help debug, and sets the log level for more verbose output.</td><td>-</td></tr><tr><td><code>--dev</code></td><td>运行开发构建</td><td></td></tr><tr><td><code>--docs-readme</code></td><td>基于组件类型，prop，methods，events，JSDocs, css 变量等生成 readme.md 文档。</td><td>-</td></tr><tr><td><code>--es5</code></td><td>创建一个与 ES5 兼容的构建。默认情况下，在开发期间不会创建 ES5 构建，以缩短构建时间。然而，ES5 构建总是在生产构建期间创建的。在开发期间可以使用此标志创建 ES5 构建。</td><td>-</td></tr><tr><td><code>--log</code></td><td>将<code>stencil build</code> 的日志写入 <code>stencil-build.log</code> 文件. log 文件的位置与配置文件的位置相</td><td>-</td></tr><tr><td><code>--prerender</code></td><td>Prerender the application using the <code>www</code> output target after the build has completed.</td><td>-</td></tr><tr><td><code>--prod</code></td><td>Runs a production build which will optimize each file, improve bundling, remove unused code, minify, etc. A production build is the default, this flag is only used to override the <code>--dev</code> flag.</td><td>-</td></tr><tr><td><code>--max-workers</code></td><td>Max number of workers the compiler should use. Defaults to use the same number of CPUs the Operating System has available.</td><td>-</td></tr><tr><td><code>--next</code></td><td>选择加入以测试 &quot;下一个版本&quot; Stencil 编译器功能。</td><td>-</td></tr><tr><td><code>--no-cache</code></td><td>禁用使用缓存。</td><td>-</td></tr><tr><td><code>--no-open</code></td><td>默认情况下，<code>--serve</code> 命令将打开一个浏览器窗口。使用 <code>--no-open</code> 命令不会自动打开浏览器窗口。</td><td>-</td></tr><tr><td><code>--port</code></td><td><a href="./dev-server.html">集成开发服务器</a> 的端口. 默认是<code>3333</code>.</td><td><code>-p</code></td></tr><tr><td><code>--serve</code></td><td>启动 <a href="./dev-server.html">集成开发服务器</a>.</td><td>-</td></tr><tr><td><code>--stats</code></td><td>将项目的统计信息写入 <code>template-stats.json</code>。stats 文件的位置与配置文件的位置相同。</td><td>-</td></tr><tr><td><code>--verbose</code></td><td>记录关于构建的每个步骤的附加信息。</td><td>-</td></tr><tr><td><code>--watch</code></td><td>在开发期间监视文件，并在文件更新时触发重新构建。</td><td>-</td></tr></tbody></table><h2 id="stencil-test" tabindex="-1"><code id="stencil-test">stencil test</code> <a class="header-anchor" href="#stencil-test" aria-label="Permalink to &quot;`stencil test`{#stencil-test}&quot;">​</a></h2><p>测试 Stencil 项目。下面的标志是 <code>test</code> 命令的可用选项。</p><table><thead><tr><th>Flag</th><th>描述</th></tr></thead><tbody><tr><td><code>--spec</code></td><td>使用 <a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a> 执行 <code>.spec.ts</code> 文件.</td></tr><tr><td><code>--e2e</code></td><td>使用 <a href="https://developers.google.com/web/tools/puppeteer" target="_blank" rel="noreferrer">Puppeteer</a> 和 <a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a> 执行 <code>.e2e.ts</code> 文件.</td></tr><tr><td><code>--no-build</code></td><td>在运行测试之前跳过生成过程。(您需要事先构建它)。</td></tr><tr><td><code>--devtools</code></td><td>在 Chrome 中打开开发工具面板进行端到端测试。设置此标志将禁用 <code>--headless</code></td></tr><tr><td><code>--headless</code></td><td>设置在 Chrome 中用于端到端测试的无头模式。<code>——headless</code> 和 <code>——headless=true</code> 将在 Chrome 中启用“旧”的无头模式，这是 Chrome v112 之前默认使用的模式。<code>——headless=new</code> 将启用 Chrome v112 中引入的新的无头模式。有关 Chrome 新 headless 模式的更多信息，请参阅<a href="https://developer.chrome.com/articles/new-headless/" target="_blank" rel="noreferrer">这篇文章</a>。</td></tr></tbody></table><h2 id="stencil" tabindex="-1"><code id="stencil">stencil</code> <a class="header-anchor" href="#stencil" aria-label="Permalink to &quot;`stencil`{#stencil}&quot;">​</a></h2><table><thead><tr><th>Flag</th><th>描述</th><th>别名</th></tr></thead><tbody><tr><td><code>--help</code></td><td>显示解释不同标志的帮助输出。</td><td><code>-h</code></td></tr><tr><td><code>--version</code></td><td>打印当前的 Stencil 版本。</td><td><code>-v</code></td></tr></tbody></table><h2 id="stencil-generate-sub-folder" tabindex="-1"><code id="stencil-generate-sub-folder">stencil generate &lt;sub-folder&gt;</code> <a class="header-anchor" href="#stencil-generate-sub-folder" aria-label="Permalink to &quot;`stencil generate &lt;sub-folder&gt;`{#stencil-generate-sub-folder}&quot;">​</a></h2><p>启动交互式组件生成器。您可以指定一个或多个子文件夹来生成组件。</p>',11),s=[r];function a(l,i,n,h,u,b){return e(),d("div",null,s)}const m=t(c,[["render",a]]);export{f as __pageData,m as default};
