import{_ as l,K as n,o as p,c,O as o,w as t,k as s,a as r,X as d}from"./chunks/framework.319defb2.js";const k=JSON.parse('{"title":"组件生命周期方法","description":"Component Lifecycle Methods","frontmatter":{"sidebar_label":"Lifecycle Methods","description":"Component Lifecycle Methods","slug":"/component-lifecycle"},"headers":[],"relativePath":"docs/components/component-lifecycle.md","filePath":"docs/components/component-lifecycle.md"}'),y={name:"docs/components/component-lifecycle.md"},i=s("h1",{id:"component-lifecycle-methods",tabindex:"-1"},[r("组件生命周期方法 "),s("a",{class:"header-anchor",href:"#component-lifecycle-methods","aria-label":'Permalink to "组件生命周期方法{#component-lifecycle-methods}"'},"​")],-1),F=s("p",null,'组件有许多生命周期方法，可以用来知道组件何时 "will" 和 "did" 加载，更新和渲染。可以将这些方法添加到组件中，以便在适当的时候挂钩到操作中。',-1),D=s("p",null,"在组件类中实现以下方法之一，Stencil 将自动按正确的顺序调用它们：",-1),C=d(`<h2 id="connectedCallback" tabindex="-1">connectedCallback() <a class="header-anchor" href="#connectedCallback" aria-label="Permalink to &quot;connectedCallback(){#connectedCallback}&quot;">​</a></h2><p>每次组件连接到 DOM 时调用。当组件第一次被连接时，这个方法在 <code>componentWillLoad</code> 之前被调用。</p><p>需要注意的是，这个方法可以被多次调用，每次调用时，元素都会在 DOM 中被 <strong>attached</strong> 或 <strong>moved</strong> 。对于每次在 DOM 中添加或移动元素时都需要运行的逻辑，使用这个生命周期方法被认为是最佳实践。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> el </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> document</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">createElement</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-cmp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(el)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// connectedCallback() called</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// componentWillLoad() called (first time)</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">el</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">remove</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// disconnectedCallback()</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">body</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">appendChild</span><span style="color:#A6ACCD;">(el)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// connectedCallback() called again, but \`componentWillLoad()\` is not.</span></span></code></pre></div><p>这个 <code>lifecycle</code> 钩子遵循与<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noreferrer">自定义元素规范</a>中描述的相同的语义。</p><h2 id="disconnectedcallback" tabindex="-1">disconnectedCallback() <a class="header-anchor" href="#disconnectedcallback" aria-label="Permalink to &quot;disconnectedCallback()&quot;">​</a></h2><p>每次组件与 DOM 断开连接时都会调用，也就是说，它可以被触发多次，不要与 <code>onDestroy</code> 类型的事件混淆。</p><p>这个 <code>lifecycle</code> 钩子遵循与<a href="https://developer.mozilla.org/en-US/docs/Web/Web_Components/Using_custom_elements" target="_blank" rel="noreferrer">自定义元素规范</a>中描述的相同的语义。</p><h2 id="componentwillload" tabindex="-1">componentWillLoad() <a class="header-anchor" href="#componentwillload" aria-label="Permalink to &quot;componentWillLoad()&quot;">​</a></h2><p>在组件第一次连接到 DOM 之后调用一次。由于这个方法只被调用一次，所以它是一个异步加载数据和设置状态的好地方，而不会触发额外的重新渲染。</p><p>可以返回一个 promise，用于等待第一次 <code>render()</code> 。</p><h2 id="componentdidload" tabindex="-1">componentDidLoad() <a class="header-anchor" href="#componentdidload" aria-label="Permalink to &quot;componentDidLoad()&quot;">​</a></h2><p>在组件完全加载和第一个 <code>render()</code> 发生后调用一次。</p><h2 id="componentshouldupdate" tabindex="-1">componentShouldUpdate() <a class="header-anchor" href="#componentshouldupdate" aria-label="Permalink to &quot;componentShouldUpdate()&quot;">​</a></h2><p>当组件的 <a href="./properties.html"><code>Prop</code></a> 或 <a href="./state.html"><code>State</code></a> 属性发生变化并且即将请求渲染时，这个钩子会被调用。这个钩子接收三个参数:新值、旧值和改变后状态的名称。它应该返回一个布尔值来表示组件是否应该重新渲染(<code>true</code>)或否(<code>false</code>)。</p><p>需要注意的是，此方法不会在初始渲染之前执行，即当组件第一次附加到 dom 时，也不会在已经计划在下一帧中进行渲染时执行。</p><p>假设组件的以下两个属性同步变化:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">somePropA </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">42</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#A6ACCD;">component</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">somePropB </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#F78C6C;">88</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p><code>componentShouldUpdate</code> 将首先被调用并传入参数: <code>42</code>、<code>undefined</code> 和 <code>somePropA</code> 。如果它返回 <code>true</code> ，钩子将不会被再次调用，因为重新渲染已经被安排好了。 相反，如果第一个 hook 返回 <code>false</code>，那么 <code>componentShouldUpdate</code> 将被再次调用，以 <code>88</code> 、<code>undefined</code> 和 <code>somePropB</code> 作为参数， 由 <code>component.somePropB = 88</code> 触发突变。</p><p>由于这个 hook 的执行可能是有条件的，依赖它来监视 prop 的变化是不好的，而是使用<code>@Watch</code>装饰器。</p><h2 id="componentwillrender" tabindex="-1">componentWillRender() <a class="header-anchor" href="#componentwillrender" aria-label="Permalink to &quot;componentWillRender()&quot;">​</a></h2><p>在每次 <code>render()</code> 之前调用。可以返回一个 promise，它可以用来等待即将到来的渲染。</p><h2 id="componentdidrender" tabindex="-1">componentDidRender() <a class="header-anchor" href="#componentdidrender" aria-label="Permalink to &quot;componentDidRender()&quot;">​</a></h2><p>在每次 <code>render()</code> 之后调用。</p><h2 id="componentwillupdate" tabindex="-1">componentWillUpdate() <a class="header-anchor" href="#componentwillupdate" aria-label="Permalink to &quot;componentWillUpdate()&quot;">​</a></h2><p>当组件即将更新时调用，因为某些<code>Prop()</code>或<code>State()</code>发生了变化。但它不会在第一次 <code>render()</code> 前被调用。</p><p>可以返回一个 promise，用于等待下一次渲染。</p><h2 id="componentdidupdate" tabindex="-1">componentDidUpdate() <a class="header-anchor" href="#componentdidupdate" aria-label="Permalink to &quot;componentDidUpdate()&quot;">​</a></h2><p>在组件更新后调用。 但它不会在第一次 <code>render()</code> 后被调用。</p><h2 id="rendering-state" tabindex="-1">Rendering State <a class="header-anchor" href="#rendering-state" aria-label="Permalink to &quot;Rendering State&quot;">​</a></h2><p>我们总是建议在 <code>componentWillRender()</code> 中进行任何渲染状态更新，因为这是在 <code>render()</code> 方法之前被调用的方法。或者使用<code>componentDidLoad()</code>、<code>componentDidUpdate()</code> 和 <code>componentDidRender()</code> 方法更新渲染状态将导致另一次渲染，这对性能来说并不理想。</p><p>如果状态必须在 <code>componentDidUpdate()</code> 或 <code>componentDidRender()</code> 中更新，它有可能使组件陷入无限循环。如果在 <code>componentDidUpdate()</code> 中更新状态是不可避免的，那么该方法还应该提供一种方法来检测 <code>props</code> 或 <code>state</code> 是否“脏”(数据是否实际不同或与之前相同)。通过脏检查，<code>componentDidUpdate()</code> 能够避免渲染相同的数据，从而再次调用 <code>componentDidUpdate()</code>。</p><h2 id="lifecycle-hierarchy" tabindex="-1">生命周期结构 <a class="header-anchor" href="#lifecycle-hierarchy" aria-label="Permalink to &quot;生命周期结构{#lifecycle-hierarchy}&quot;">​</a></h2><p>生命周期方法的一个有用特性是，它们也将子组件的生命周期考虑在内。例如，如果父组件 <code>cmp-a</code> 有一个子组件 <code>cmp-b</code> ，那么在 <code>cmp-b</code> 完成加载之前，<code>cmp-a</code> 不会被认为是 &quot;loaded&quot; 的。另一种说法是，最深的组件首先完成加载，然后 <code>componentDidLoad()</code> 调用冒泡。</p><p>同样需要注意的是，即使 Stencil 可以延迟加载组件，并且具有异步渲染，生命周期方法仍然以正确的顺序被调用。因此，虽然顶层组件可能已经加载，但它的所有生命周期方法仍然会以正确的顺序调用，这意味着它将等待子组件完成加载。相反的情况也是如此，子组件可能已经准备好了，而父组件还没有。</p><p>在下面的例子中，我们有一个简单的组件层次结构。编号的列表显示了生命周期方法被触发的顺序。</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">cmp-a</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">cmp-b</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">cmp-c</span><span style="color:#89DDFF;">&gt;&lt;/</span><span style="color:#F07178;">cmp-c</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">cmp-b</span><span style="color:#89DDFF;">&gt;</span></span>
<span class="line"><span style="color:#89DDFF;">&lt;/</span><span style="color:#F07178;">cmp-a</span><span style="color:#89DDFF;">&gt;</span></span></code></pre></div><ol><li><code>cmp-a</code> - <code>componentWillLoad()</code></li><li><code>cmp-b</code> - <code>componentWillLoad()</code></li><li><code>cmp-c</code> - <code>componentWillLoad()</code></li><li><code>cmp-c</code> - <code>componentDidLoad()</code></li><li><code>cmp-b</code> - <code>componentDidLoad()</code></li><li><code>cmp-a</code> - <code>componentDidLoad()</code></li></ol><p>即使有些组件可能已经加载，也可能没有加载，整个组件层次结构都会等待它的子组件完成加载和渲染。</p><h2 id="async-lifecycle-methods" tabindex="-1">异步生命的周期方法 <a class="header-anchor" href="#async-lifecycle-methods" aria-label="Permalink to &quot;异步生命的周期方法{#async-lifecycle-methods}&quot;">​</a></h2><p>生命周期方法也可以返回 Promise，它允许方法异步检索数据或执行任何异步任务。一个很好的例子是获取要在组件中渲染的数据。例如，您正在读取的这个网站在渲染之前首先获取内容数据。 但是因为 <code>fetch()</code> 是异步的，所以重要的是 <code>componentWillLoad()</code> 返回一个 <code>Promise</code>，以确保父组件在其所有内容渲染之前不会被认为是“已加载”。</p><p>下面是一个简单的例子，展示了 <code>componentWillLoad()</code> 如何让它的父组件等待它完成数据加载。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">componentWillLoad</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">/some-data.json</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">response</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">response</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">())</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">then</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;font-style:italic;">data</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">content</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">data</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="example" tabindex="-1">示例 <a class="header-anchor" href="#example" aria-label="Permalink to &quot;示例{#example}&quot;">​</a></h2><p>这个简单的例子展示了一个时钟，并每秒更新当前时间。计时器在组件被添加到 DOM 时启动。一旦它从 DOM 中移除，定时器就会停止。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Component</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">State</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">Component</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">tag</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">custom-clock</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">class</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">CustomClock</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">timer</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">@</span><span style="color:#82AAFF;">State</span><span style="color:#A6ACCD;">() </span><span style="color:#F07178;">time</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">number</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> Date</span><span style="color:#89DDFF;">.</span><span style="color:#F07178;">now</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">connectedCallback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">setInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">      </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Date</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">now</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">},</span><span style="color:#F07178;"> </span><span style="color:#F78C6C;">1000</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">disconnectedCallback</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">window</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">clearInterval</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">timer</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">render</span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">Date</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">time</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toLocaleTimeString</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;font-style:italic;">return</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;{</span><span style="color:#A6ACCD;">time</span><span style="color:#89DDFF;">}&lt;/</span><span style="color:#F07178;">span</span><span style="color:#89DDFF;">&gt;;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div>`,46);function m(A,h,u,b,f,g){const a=n("LifecycleMethodsChart"),e=n("ClientOnly");return p(),c("div",null,[i,F,D,o(e,null,{default:t(()=>[o(a)]),_:1}),C])}const q=l(y,[["render",m]]);export{k as __pageData,q as default};
