import{_ as s,o as a,c as e,X as n}from"./chunks/framework.319defb2.js";const u=JSON.parse('{"title":"Static Site Generation Basics","description":"Quick introduction to configuring and using Static Site Generation in Stencil","frontmatter":{"description":"Quick introduction to configuring and using Static Site Generation in Stencil"},"headers":[],"relativePath":"docs/static-site-generation/basics.md","filePath":"docs/static-site-generation/basics.md"}'),o={name:"docs/static-site-generation/basics.md"},t=n(`<h1 id="static-site-generation-basics" tabindex="-1">Static Site Generation Basics <a class="header-anchor" href="#static-site-generation-basics" aria-label="Permalink to &quot;Static Site Generation Basics&quot;">​</a></h1><p>Rendering components at build time (rather than purely server or client-time), can add significant performance improvements to your app, and maximize SEO impact.</p><p>Using Static Site Generation in Stencil requires running a build command, returning promises from component lifecycle methods that fetch dynamic data, and ensuring all known URLs are properly discovered and built.</p><h2 id="static-build" tabindex="-1">Static Build <a class="header-anchor" href="#static-build" aria-label="Permalink to &quot;Static Build&quot;">​</a></h2><p>Stencil doesn&#39;t prerender components by default. However, the build can be made to prerender using the <code>--prerender</code> flag:</p><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">stencil</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">build</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">--prerender</span></span></code></pre></div><h2 id="rendering-dynamic-data" tabindex="-1">Rendering Dynamic Data <a class="header-anchor" href="#rendering-dynamic-data" aria-label="Permalink to &quot;Rendering Dynamic Data&quot;">​</a></h2><p>Many components need to render based on data fetched from a server. Stencil handles this by allowing components to return <code>Promise</code>&#39;s from lifecycle methods like <code>componentWillLoad</code> (this can be achieved by using <code>async/await</code> as well).</p><p>For example, this is how to have Stencil wait to render a component until it fetches data from the server:</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#A6ACCD;">async </span><span style="color:#82AAFF;">componentWillLoad</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">fetch</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">https://.../api</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">this.</span><span style="color:#A6ACCD;">thing</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">ret</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">json</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><h2 id="integration-with-a-router" tabindex="-1">Integration with a Router <a class="header-anchor" href="#integration-with-a-router" aria-label="Permalink to &quot;Integration with a Router&quot;">​</a></h2><p>Since Stencil will actually navigate to and execute components, it has full support for a router, including Stencil Router.</p><p>There are no changes necessary to access route params and matches. However, make sure your routes can accept a trailing slash as prerendered static content will be treated as loading an <code>index.html</code> file at that path, and so the browser may append a trailing slash.</p><p>In particular, if using Stencil Router, double check usage of <code>exact={true}</code> which could cause your routes to not match when loaded with a trailing slash.</p><h2 id="page-and-url-discovery" tabindex="-1">Page and URL Discovery <a class="header-anchor" href="#page-and-url-discovery" aria-label="Permalink to &quot;Page and URL Discovery&quot;">​</a></h2><p>By default, Stencil crawls your app starting at base URL of <code>/</code> and discovers all paths that need to be indexed. By default this will only discover pages that are linked at build time, but can be easily configured to build any possible URL for the app.</p><p>As each page is generated and new links are found, Stencil will continue to crawl and prerender pages.</p><p>See the <a href="./prerender-config.html">prerender config</a> docs to see how this can be customized further.</p><h2 id="things-to-watch-for" tabindex="-1">Things to Watch For <a class="header-anchor" href="#things-to-watch-for" aria-label="Permalink to &quot;Things to Watch For&quot;">​</a></h2><p>There may be some areas of your code that should absolutely not run while prerendering. To help avoid certain code Stencil provides a <code>Build.isBrowser</code> build conditional to tell prerendering to skip over. Here is an example of how to use this utility:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Build</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&#39;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">connectedCallback</span><span style="color:#A6ACCD;">() </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Build.isBrowser is true when running in the</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// browser and false when being prerendered</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;font-style:italic;">if</span><span style="color:#F07178;"> (</span><span style="color:#A6ACCD;">Build</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">isBrowser</span><span style="color:#F07178;">) </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">running in browser</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">else</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">&#39;</span><span style="color:#C3E88D;">running in node while prerendering</span><span style="color:#89DDFF;">&#39;</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div><p>Also note that the actual runtime generated for the browser builds will not include code that has been excluded because of the <code>if (Build.isBrowser)</code> statement. In the above example, only <code>console.log(&#39;running in browser&#39;)</code> would be included within the component&#39;s runtime.</p>`,22),l=[t];function p(r,c,i,d,y,h){return a(),e("div",null,l)}const D=s(o,[["render",p]]);export{u as __pageData,D as default};
