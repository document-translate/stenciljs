import{_ as e,o as t,c as o,X as c}from"./chunks/framework.319defb2.js";const S=JSON.parse('{"title":"部署 Stencil 静态站点","description":"部署一个静态站点","frontmatter":{"description":"部署一个静态站点"},"headers":[],"relativePath":"docs/static-site-generation/deployment.md","filePath":"docs/static-site-generation/deployment.md"}'),n={name:"docs/static-site-generation/deployment.md"},a=c('<h1 id="部署-stencil-静态站点" tabindex="-1">部署 Stencil 静态站点 <a class="header-anchor" href="#部署-stencil-静态站点" aria-label="Permalink to &quot;部署 Stencil 静态站点&quot;">​</a></h1><p>部署使用 Stencil 构建的预渲染静态网站与部署任何静态网站一样，因为输出只是一组 HTML 文件。</p><p>Stencil 检测到的每一个路径(或者在 prerender 配置文件中使用 <code>entryUrls</code> 提供的路径)都是在 <code>www</code> 输出目标的目录中生成的，每个 url 都有一个 <code>index.html</code> 作为应用的根目录。</p><p>将其视为将应用程序中的每个 URL 转换为一个独立的 web 页面，以引导整个应用程序。 无论访问者访问哪个 URL，他们都将得到一个已经渲染了该页面特定内容的 <code>index.html</code> 文件，然后整个应用程序进行 hydration 和加载。</p><p>这意味着你可以简单地将 <code>www</code> 输出目标目录部署到任何静态主机!</p>',5),d=[a];function i(s,r,l,_,p,m){return t(),o("div",null,d)}const f=e(n,[["render",i]]);export{S as __pageData,f as default};
