import{_ as s,o as a,c as n,X as l}from"./chunks/framework.319defb2.js";const d=JSON.parse('{"title":"自定义元素","description":"Custom Elements with Stencil","frontmatter":{"description":"Custom Elements with Stencil"},"headers":[],"relativePath":"docs/output-targets/custom-elements.md","filePath":"docs/output-targets/custom-elements.md"}'),o={name:"docs/output-targets/custom-elements.md"},p=l(`<h1 id="custom-elements" tabindex="-1">自定义元素 <a class="header-anchor" href="#custom-elements" aria-label="Permalink to &quot;自定义元素{#custom-elements}&quot;">​</a></h1><p><code>dist-custom-elements</code> 输出目标创建直接扩展 <code>HTMLElement</code> 的自定义元素，并提供简单的实用函数，以便在<a href="https://developer.mozilla.org/en-US/docs/Web/API/CustomElementRegistry" target="_blank" rel="noreferrer">自定义元素注册表</a>上轻松定义这些元素。这个输出目标非常适合用于处理打包、懒加载和自定义元素注册的前端框架和项目。</p><p>如果不需要或不需要懒加载功能，这个目标也可以在框架之外使用。要使用惰性加载的 Stencil 组件，请参考<a href="./dist.html">dist 输出目标</a>。</p><p>要使用 <code>dist-custom-elements</code> 输出目标生成组件，请将其添加到项目的 <code>stencil.config.ts</code> 文件中，如下所示：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-cf19O" id="tab--3_dklO" checked="checked"><label for="tab--3_dklO">stencil.config.ts</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// Other top-level config options here</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outputTargets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist-custom-elements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">      </span><span style="color:#676E95;font-style:italic;">// Output target config options here</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// Other output targets here</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div></div></div><h2 id="config" tabindex="-1">配置 <a class="header-anchor" href="#config" aria-label="Permalink to &quot;配置{#config}&quot;">​</a></h2><h3 id="copy" tabindex="-1">copy <a class="header-anchor" href="#copy" aria-label="Permalink to &quot;copy&quot;">​</a></h3><p><em>默认值: <code>undefined</code></em></p><p>在构建过程中执行的 <a href="./copy-tasks.html">copy tasks</a> 数组。</p><h3 id="customelementsexportbehavior" tabindex="-1">customElementsExportBehavior <a class="header-anchor" href="#customelementsexportbehavior" aria-label="Permalink to &quot;customElementsExportBehavior&quot;">​</a></h3><p><em>默认值: <code>&#39;default&#39;</code></em></p><p>默认情况下，<code>dist-custom-elements</code> 输出目标为每个组件生成一个文件，并分别导出这些文件。</p><p>在某些情况下，库的作者可能想要改变这种行为，例如自动定义组件子组件，提供一个包含所有组件导出的文件，等等。</p><p>此配置选项提供其他行为，这些行为将更改此目标的默认组件导出或自定义元素定义行为。在项目的 Stencil 配置文件中，可以通过以下方式设置所需的行为:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// stencil.config.ts</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outputTargets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist-custom-elements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">customElementsExportBehavior</span><span style="color:#89DDFF;">:</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">default</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">auto-define-custom-elements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">bundle</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">|</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">single-export-module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><table><thead><tr><th>选项</th><th>描述</th></tr></thead><tbody><tr><td><code>default</code></td><td>不会执行额外的重新导出或自动定义行为。<br>如果在配置中没有设置显式值，或者给定的值不是有效选项，则使用此值。</td></tr><tr><td><code>auto-define-custom-elements</code></td><td>当组件的模块被导入时，组件及其子组件将自动使用 <code>CustomElementRegistry</code> 定义。</td></tr><tr><td><code>bundle</code></td><td>从输出目录的 <code>index.js</code> 文件中导出一个实用的 <code>defineCustomElements()</code> 函数。此函数可用于在自定义元素注册表上快速定义项目中的所有 Stencil 组件。</td></tr><tr><td><code>single-export-module</code></td><td>所有组件和自定义元素定义的辅助函数都将从输出目录中的<code>index.js</code>文件中导出。当分发组件库时，这个文件可以用作根模块，请参阅<a href="#consuming-custom-elements">下面</a>了解更多细节。</td></tr></tbody></table><div class="info custom-block"><p class="custom-block-title">提示</p><p>此时，不使用 JSX 的组件无法自动定义。这是 Stencil 的一个已知限制，用户应该知道。</p></div><h3 id="dir" tabindex="-1">dir <a class="header-anchor" href="#dir" aria-label="Permalink to &quot;dir&quot;">​</a></h3><p><em>default: <code>&#39;dist/components&#39;</code></em></p><p>此配置选项允许您更改将写入此输出目标的编译输出的输出目录。</p><h3 id="empty" tabindex="-1">empty <a class="header-anchor" href="#empty" aria-label="Permalink to &quot;empty&quot;">​</a></h3><p><em>默认值: <code>true</code></em></p><p>将此标志设置为 <code>true</code> 将在构建之间删除<a href="#dir">输出目录</a>的内容。</p><h3 id="externalruntime" tabindex="-1">externalRuntime <a class="header-anchor" href="#externalruntime" aria-label="Permalink to &quot;externalRuntime{#externalruntime}&quot;">​</a></h3><p><em>默认值: <code>true</code></em></p><p>将此标志设置为 <code>true</code> 会导致以下行为：</p><ol><li>压缩将遵循 <a href="./../config/overview.html#minifyjs">Stencil config</a> 中指定的内容。</li><li>文件名不会被哈希。</li><li>所有从 <code>@stencil/core/*</code> 下导入的包都将被标记为外部，因此不会包含在生成的 Rollup 包中。</li></ol><h3 id="generatetypedeclarations" tabindex="-1">generateTypeDeclarations <a class="header-anchor" href="#generatetypedeclarations" aria-label="Permalink to &quot;generateTypeDeclarations&quot;">​</a></h3><p><em>默认值: <code>true</code></em></p><p>默认情况下，Stencil 将通过目标选项上的 <code>generateTypeDeclarations</code> 字段生成类型声明文件(<code>.d.ts</code> 文件)，作为 <code>dist-custom-elements</code> 输出目标的一部分。 类型声明文件将放置在 Stencil 项目根目录的 <code>dist/types</code> 目录中。此时，无法配置此输出目标。</p><p>将此标志设置为 <code>false</code> 将不会为 <code>dist-custom-elements</code> 输出目标生成类型声明文件。</p><div class="info custom-block"><p class="custom-block-title">提示</p><p>当设置为生成类型声明时，Stencil 遵守通过 <code>customElementsExportBehavior</code> 选择的导出行为，并生成特定于生成的<a href="#dir">输出目录</a>内容的类型声明 <code>index.js</code> 文件。</p></div><h3 id="includeglobalscripts" tabindex="-1">includeGlobalScripts <a class="header-anchor" href="#includeglobalscripts" aria-label="Permalink to &quot;includeGlobalScripts&quot;">​</a></h3><p><em>默认值: <code>false</code></em></p><p>将此标志设置为 <code>true</code> 将在打包文件中包含<a href="./../config/overview.html#globalscript">全局脚本</a>，并在打包文件入口点加载后执行它们。</p><h3 id="isprimarypackageoutputtarget" tabindex="-1">isPrimaryPackageOutputTarget <a class="header-anchor" href="#isprimarypackageoutputtarget" aria-label="Permalink to &quot;isPrimaryPackageOutputTarget&quot;">​</a></h3><p><em>默认值: <code>false</code></em></p><p>如果为 <code>true</code>，则此输出目标将用于验证项目发行版的 <code>package.json</code> 字段。 有关更多信息，请参阅<a href="./overview.html#primary-package-output-target-validation">主包输出目标验证</a>的概述。</p><h3 id="minify" tabindex="-1">minify <a class="header-anchor" href="#minify" aria-label="Permalink to &quot;minify&quot;">​</a></h3><p><em>默认值: <code>false</code></em></p><p>将此标志设置为 <code>true</code> 将导致文件压缩遵循 <a href="./../config/overview.html#minifyjs">Stencil 配置</a>中指定的内容。 但是，如果启用了 <a href="#externalruntime"><code>externalRuntime</code></a> ，它将覆盖此选项，并始终导致禁用压缩。</p><h2 id="consuming-custom-elements" tabindex="-1">使用自定义元素 <a class="header-anchor" href="#consuming-custom-elements" aria-label="Permalink to &quot;使用自定义元素{#consuming-custom-elements}&quot;">​</a></h2><p>默认情况下，自定义元素文件将被写入 <code>dist/components/</code>。这个目录可以使用输出目标的 <a href="#dir"><code>dir</code></a> 配置来配置。</p><p>生成的文件将每个导出一个组件类，并且已经打包了样式。然而，这个版本并没有定义自定义元素或者应用任何 polyfills。 组件中引用的静态资源需要使用 <code>setAssetPath</code> 来设置(请参阅<a href="#making-assets-available">使资源可用</a>)。</p><p>下面是定义自定义元素的示例:</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElement</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-library/dist/components/hello-world</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">defineCustomElement</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span><span style="color:#A6ACCD;"> </span><span style="color:#676E95;font-style:italic;">// Same as manually calling: customElements.define(&#39;hello-world&#39;, HelloWorld);</span></span></code></pre></div><p>输出目录还将包含一个默认导出一些辅助方法的 <code>index.js</code>文件。文件内容看起来像这样：</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">setAssetPath</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">setPlatformOptions</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core/internal/client</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>如果指定了 <a href="#customelementsexportbehavior"><code>customElementsExportBehavior</code></a>，内容可能看起来不一样!</p></div><h2 id="making-assets-available" tabindex="-1">使资源可用 <a class="header-anchor" href="#making-assets-available" aria-label="Permalink to &quot;使资源可用{#making-assets-available}&quot;">​</a></h2><p>出于性能原因，生成的打包文件不包括 JavaScript 输出中构建的<a href="./../guides/assets.html">本地资源</a>，而是建议将静态资源作为外部文件。 通过将它们放在外部，可以确保它们可以按需请求，而不是将它们的内容焊接到 JS 文件中，或者为打包工具添加许多 url 以输出。</p><p>确保 <a href="./../guides/assets.html">assets</a> 对外部构建和 http 服务器可用的一种方法是使用 <code>setAssetPath()</code> 设置资源路径。</p><p><code>setAssetPath()</code> 函数用于手动设置可以找到静态资源的基本路径。 对于延迟加载的输出目标，资源路径会自动设置，资源会被复制到正确的构建目录中。然而，对于自定义元素的构建，应该使用 <code>setAssetPath(path)</code> 来根据 http 服务器上的位置自定义资源路径。</p><p>如果组件的脚本是 <code>type=&quot;module&quot;</code>，则建议使用 <code>i<wbr>mport.meta.url</code>，例如 <code>setAssetPath(i<wbr>mport.meta.url)</code>。 其他选项包括 <code>setAssetPath(document.currentScript.src)</code>，或者使用打包工具的替换插件</p><p>在构建时动态设置路径，例如<code>setAssetPath(p<wbr>rocess.env.ASSET_PATH)</code>。</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setAssetPath</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-library/dist/components</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">setAssetPath</span><span style="color:#A6ACCD;">(document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">currentScript</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">src)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>请确保将资源文件复制到应用程序的公共目录中。这个配置取决于你的脚本是如何打包的，是否打包，以及资源文件从哪里加载。如何将文件复制到生产环境的构建目录取决于打包工具或工具。 下面的配置提供了如何使用流行的打包工具自动完成此操作的示例。</p><h2 id="distributing-custom-elements" tabindex="-1">分发自定义元素 <a class="header-anchor" href="#distributing-custom-elements" aria-label="Permalink to &quot;分发自定义元素{#distributing-custom-elements}&quot;">​</a></h2><p>请参阅我们<a href="./../guides/publishing.html">发布组件库</a>的文档，了解有关设置库的 <code>package_json</code> 文件和发布到包管理器的信息。</p><p>默认情况下，自定义元素需要从输出目标配置中指定的<a href="#dir">输出目录</a>中导入：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">best-web-components/dist/components/my-component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>但是 <code>package_json</code> 中的 <code>module</code> 属性可以被修改为指向自定义元素的输出：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-c-q5U" id="tab-OKXJTin" checked="checked"><label for="tab-OKXJTin">package.json</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/components/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latest</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>一定要将 <code>@stencil/core</code> 设置为包的依赖项。</p></div><p>因此，可以选择从已发布包的根目录导入组件：</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyComponent</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">best-web-components</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span></code></pre></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>如果你同时分发 <a href="./dist.html"><code>dist</code></a> 和 <code>dist-custom-elements</code> 目标的输出，那么由你来选择它们中的哪一个应该出现在 <code>module</code> 条目中。</p></div><h3 id="usage-in-typescript" tabindex="-1">在 Typescript 中使用 <a class="header-anchor" href="#usage-in-typescript" aria-label="Permalink to &quot;在 Typescript 中使用{#usage-in-typescript}&quot;">​</a></h3><p>如果你计划支持在 Typescript 中使用组件库，你需要在 <code>stencil.config.ts</code> 的输出目标上设置 <code>generateTypeDeclarations: true</code>，如下所示：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-zQw0r" id="tab-XkZuSir" checked="checked"><label for="tab-XkZuSir">stencil.config.ts</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">Config</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">Config</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">outputTargets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">type</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist-custom-elements</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">generateTypeDeclarations</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FF9CAC;">true</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">    </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">  </span><span style="color:#676E95;font-style:italic;">// ...</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div></div></div><p>然后你可以在 <code>package.json</code> 中设置 <code>types</code> 属性，以便你的包的使用者可以找到类型定义，如下所示：</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-psoDQ" id="tab-XwIKsAI" checked="checked"><label for="tab-XwIKsAI">package.json</label></div><div class="blocks"><div class="language-tsx active"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">module</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/components/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">types</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/components/index.d.ts</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dependencies</span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">: </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#89DDFF;">&quot;</span><span style="color:#F07178;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">latest</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">...</span></span>
<span class="line"><span style="color:#89DDFF;">}</span></span></code></pre></div></div></div><div class="info custom-block"><p class="custom-block-title">提示</p><p>如果你在输出目标配置文件中设置了 <code>dir</code> 属性，用配置文件中设置的路径替换上面代码片段中的 <code>dist/components</code>。</p></div><h2 id="example-bundler-configs" tabindex="-1">Example Bundler Configs <a class="header-anchor" href="#example-bundler-configs" aria-label="Permalink to &quot;Example Bundler Configs&quot;">​</a></h2><p>&quot;根据您使用的打包工具，自定义元素捆绑包的使用方式会有所不同。以下示例将帮助您的用户在 webpack 和 Rollup 中使用您的组件。&quot;</p><p>下面的例子假设你的组件库以 <code>my-library</code> 的形式发布到 NPM 上。您应该将其更改为您实际发布库的名称。</p><p>用户需要在导入之前安装你的库。</p><div class="vp-code-group"><div class="tabs"><input type="radio" name="group-XL-Ye" id="tab-_RYu9DE" checked="checked"><label for="tab-_RYu9DE">npm</label><input type="radio" name="group-XL-Ye" id="tab-REPx-Ad"><label for="tab-REPx-Ad">yarn</label><input type="radio" name="group-XL-Ye" id="tab-82hwnIz"><label for="tab-82hwnIz">pnpm</label></div><div class="blocks"><div class="language-bash active"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">install</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-library</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-library</span></span></code></pre></div><div class="language-bash"><button title="Copy Code" class="copy"></button><span class="lang">bash</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#FFCB6B;">npm</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">add</span><span style="color:#A6ACCD;"> </span><span style="color:#C3E88D;">my-library</span></span></code></pre></div></div></div><h3 id="webpack-config-js" tabindex="-1">webpack.config.js <a class="header-anchor" href="#webpack-config-js" aria-label="Permalink to &quot;webpack.config.js&quot;">​</a></h3><p>webpack 配置如下所示。请注意，资源文件是如何通过 <code>CopyPlugin</code> 工具从库的 <code>node_module</code> 文件夹复制到 <code>dist/assets</code>的。 如果你的库包含<a href="./../guides/assets.html">本地资源</a>，这很重要。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> CopyPlugin </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">require</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">copy-webpack-plugin</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;">module.exports</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">entry</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">./src/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">filename</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">main.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">path</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">module</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#F07178;">rules</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">test</span><span style="color:#89DDFF;">:</span><span style="color:#C3E88D;"> </span><span style="color:#89DDFF;">/</span><span style="color:#A6ACCD;">\\.</span><span style="color:#C3E88D;">css</span><span style="color:#89DDFF;font-style:italic;">$</span><span style="color:#89DDFF;">/</span><span style="color:#F78C6C;">i</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#F07178;">use</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">style-loader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">css-loader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">    ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">new</span><span style="color:#A6ACCD;"> </span><span style="color:#82AAFF;">CopyPlugin</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">patterns</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">from</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            __dirname</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules/my-library/dist/my-library/assets</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">          )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">to</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/assets</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h3 id="rollup-config-js" tabindex="-1">rollup.config.js <a class="header-anchor" href="#rollup-config-js" aria-label="Permalink to &quot;rollup.config.js&quot;">​</a></h3><p>Rollup 配置如下所示。请注意，资源是如何通过 <code>rollup-copy-plugin</code> 工具从库的 <code>node_module</code> 文件夹复制到 <code>dist/assets</code> 的。 如果你的库包含<a href="./../guides/assets.html">本地资源</a>，这很重要。</p><div class="language-js"><button title="Copy Code" class="copy"></button><span class="lang">js</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> path </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">path</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> commonjs </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@rollup/plugin-commonjs</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> copy </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rollup-plugin-copy</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> postcss </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">rollup-plugin-postcss</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> resolve </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@rollup/plugin-node-resolve</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">default</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">input</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">src/index.js</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">output</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">{</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">dir</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist/</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#F07178;">format</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">es</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">plugins</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">commonjs</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">postcss</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">extensions</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">.css</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#82AAFF;">copy</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">      </span><span style="color:#F07178;">targets</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> [</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">src</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(</span></span>
<span class="line"><span style="color:#A6ACCD;">            __dirname</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">            </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">node_modules/my-library/dist/my-library/assets</span><span style="color:#89DDFF;">&quot;</span></span>
<span class="line"><span style="color:#A6ACCD;">          )</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">          </span><span style="color:#F07178;">dest</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> path</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">resolve</span><span style="color:#A6ACCD;">(__dirname</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">dist</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">        </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#A6ACCD;">      ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">    </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#A6ACCD;">  ]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="这与-dist-输出目标有何不同" tabindex="-1">这与 &quot;dist&quot; 输出目标有何不同? <a class="header-anchor" href="#这与-dist-输出目标有何不同" aria-label="Permalink to &quot;这与 &quot;dist&quot; 输出目标有何不同?&quot;">​</a></h2><p><code>dist-custom-elements</code> 将每个组件构建为一个独立的类，它扩展了 <code>HTMLElement</code>。输出是一个标准化的自定义元素，样式已经附加，没有任何 Stencil 的懒加载功能。对于已经处理打包、懒加载和自定义元素的项目来说，这可能是首选。</p><p>另一方面，<code>dist</code> 输出目标更多地用于那些希望允许组件自己懒加载的项目，而无需设置打包配置。</p><p>幸运的是，所有构建可以同时生成，使用相同的源代码，并在相同的发行版中发布。使用哪个版本将由组件库的使用者决定。</p>`,88),e=[p];function t(c,r,D,y,i,F){return a(),n("div",null,e)}const A=s(o,[["render",t]]);export{d as __pageData,A as default};
