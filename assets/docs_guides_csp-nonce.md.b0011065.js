import{_ as e,o as s,c as n,X as t}from"./chunks/framework.319defb2.js";const D=JSON.parse('{"title":"Content Security Policy Nonces","description":"How to leverage CSP nonces in Stencil projects.","frontmatter":{"title":"Content Security Policy Nonces","description":"How to leverage CSP nonces in Stencil projects.","slug":"/csp-nonce"},"headers":[],"relativePath":"docs/guides/csp-nonce.md","filePath":"docs/guides/csp-nonce.md"}'),o={name:"docs/guides/csp-nonce.md"},a=t(`<h1 id="using-content-security-policy-nonces-in-stencil" tabindex="-1">Using Content Security Policy Nonces in Stencil <a class="header-anchor" href="#using-content-security-policy-nonces-in-stencil" aria-label="Permalink to &quot;Using Content Security Policy Nonces in Stencil&quot;">​</a></h1><p><a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP" target="_blank" rel="noreferrer">Content Security Policies (CSPs)</a> can help protect an application from Cross-Site Scripting (XSS) attacks by adding a security layer to help prevent unauthorized code from running in the browser.</p><p>An application that is served with a CSP other than &#39;unsafe-inline&#39; and contains web components without a Shadow DOM will likely run into errors on load. This is often first detected in the browser&#39;s console, which reports an error stating that certain styles or scripts violate the effective CSP.</p><p>To resolve this issue, Stencil supports using <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce" target="_blank" rel="noreferrer">CSP nonces</a> in many of the output targets.</p><div class="warning custom-block"><p class="custom-block-title">WARNING</p><p>NOTE: CSPs and some CSP strategies are not supported by certain browsers. For a more detailed list, please see the <a href="https://developer.mozilla.org/en-US/docs/Web/HTTP/CSP#browser_compatibility" target="_blank" rel="noreferrer">CSP browser compatibility table</a>.</p></div><h2 id="how-to-use-a-nonce" tabindex="-1">How to Use a Nonce <a class="header-anchor" href="#how-to-use-a-nonce" aria-label="Permalink to &quot;How to Use a Nonce&quot;">​</a></h2><p>The actual generation of the nonce value and enforcement of the correct CSP are not the responsibility of Stencil. Instead, the server of the application will need to generate the nonce value for each page view, construct the CSP, and then correctly handle passing the generated nonce to Stencil based on which output target is being consumed.</p><p>There are many resources available that walk through setting up a CSP and using the nonce behavior. <a href="https://towardsdatascience.com/content-security-policy-how-to-create-an-iron-clad-nonce-based-csp3-policy-with-webpack-and-nginx-ce5a4605db90" target="_blank" rel="noreferrer">This</a> article walks through the process using Nginx and Webpack. Obviously, these resources don&#39;t account for the Stencil specifics, but any specifics will be called out in this guide.</p><p>Per the <a href="https://developer.mozilla.org/en-US/docs/Web/HTML/Global_attributes/nonce#generating_values" target="_blank" rel="noreferrer">MDN Guide on nonces</a>, a nonce should be &quot;a random base64-encoded string of at least 128 bits of data from a cryptographically secure random number generator&quot;.</p><h3 id="output-targets" tabindex="-1">Output Targets <a class="header-anchor" href="#output-targets" aria-label="Permalink to &quot;Output Targets&quot;">​</a></h3><p>Using nonces may differ slightly between output targets, so please be sure to use the correct pattern based on the context in which your Stencil components are consumed.</p><h4 id="dist" tabindex="-1">Dist <a class="header-anchor" href="#dist" aria-label="Permalink to &quot;Dist&quot;">​</a></h4><p>Consuming a <code>nonce</code> in the <code>dist</code> output target is easy using the provided <code>setNonce</code> helper function. This function is exported from the index file of the output target&#39;s designated output directory.</p><p>This function simply accepts the <code>nonce</code> string value that you want set for every <code>style</code> and <code>script</code> tag.</p><p>This is an example of consuming the <code>dist</code> output in an Angular app&#39;s entrypoint:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElements</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setNonce</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-lib/loader</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Will set the \`nonce\` attribute for all scripts/style tags</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i.e. will run styleTag.setAttribute(&#39;nonce&#39;, &#39;r4nd0m&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Obviously, you should use the nonce generated by your server</span></span>
<span class="line"><span style="color:#82AAFF;">setNonce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">r4nd0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Generic Angular bootstrapping</span></span>
<span class="line"><span style="color:#82AAFF;">platformBrowserDynamic</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bootstrapModule</span><span style="color:#A6ACCD;">(AppModule)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(err))</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">defineCustomElements</span><span style="color:#A6ACCD;">()</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="custom-elements" tabindex="-1">Custom Elements <a class="header-anchor" href="#custom-elements" aria-label="Permalink to &quot;Custom Elements&quot;">​</a></h4><p>Consuming a <code>nonce</code> in the <code>dist-custom-elements</code> output target is easy using the provided <code>setNonce</code> helper function. This function is exported from the index file of the output target&#39;s designated output directory.</p><p>This function simply accepts the <code>nonce</code> string value that you want set for every <code>style</code> and <code>script</code> tag.</p><p>This is an example of consuming the <code>dist-custom-elements</code> output in an Angular app&#39;s entrypoint:</p><div class="language-ts"><button title="Copy Code" class="copy"></button><span class="lang">ts</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// main.ts</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">defineCustomElements</span><span style="color:#89DDFF;">,</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">setNonce</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-lib/dist/components</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Assume \`customElementsExportBehavior: &#39;auto-define-custom-elements&#39;\` is set</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">my-lib/dist/components/my-component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Will set the \`nonce\` attribute for all scripts/style tags</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// i.e. will run styleTag.setAttribute(&#39;nonce&#39;, &#39;r4nd0m&#39;)</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Obviously, you should use the nonce generated by your server</span></span>
<span class="line"><span style="color:#82AAFF;">setNonce</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">r4nd0m</span><span style="color:#89DDFF;">&quot;</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Generic Angular bootstrapping</span></span>
<span class="line"><span style="color:#82AAFF;">platformBrowserDynamic</span><span style="color:#A6ACCD;">()</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">bootstrapModule</span><span style="color:#A6ACCD;">(AppModule)</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">catch</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">err</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> console</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">log</span><span style="color:#A6ACCD;">(err))</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h4 id="www" tabindex="-1">WWW <a class="header-anchor" href="#www" aria-label="Permalink to &quot;WWW&quot;">​</a></h4><p>Unfortunately, setting <code>nonce</code> attributes gets a bit trickier when it comes to <a href="./../static-site-generation/overview.html">SSR and SSG</a>. As a <code>nonce</code> needs to be unique per page view, it cannot be defined/set at build time. So, this responsibility now falls on the <a href="./../guides/hydrate-app.html">hydrate app</a>&#39;s execution of runtime code.</p><p><strong>SSR</strong></p><p>Since there is not an easy way (or any way) of exposing and executing helper functions to manipulate the outcome of the runtime code, Stencil has fallback behavior for pulling the <code>nonce</code> off of a <code>meta</code> tag in the DOM head.</p><p>So, for SSR, your app can simply inject a <code>meta</code> element into the header <em>on each page request</em>. Yes, this does involve some manual configuration for the code served by your server. To work correctly, the created tag must be generated as follows:</p><div class="language-html"><button title="Copy Code" class="copy"></button><span class="lang">html</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;">&lt;</span><span style="color:#F07178;">meta</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">name</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">csp-nonce</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">content</span><span style="color:#89DDFF;">=</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">{ your nonce value here }</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;"> /&gt;</span></span></code></pre></div><p>This isn&#39;t a security risk because, for an attacker to execute a script to pull the nonce from the meta tag, they would have needed to know the nonce <em>ahead</em> of the script&#39;s execution.</p><p><strong>SSG</strong></p><p>Stencil cannot support CSP nonces with SSG. Because all of the code is generated during <a href="./../static-site-generation/overview.html#how-static-site-generation-and-prerendering-works">pre-rendering</a>, Stencil doesn&#39;t generate the <code>style</code> or <code>script</code> tags at runtime. If an application wants to leverage nonces in SSG, they can build a mechanism to scrape the pre-rendered code and apply the attribute server-side before it is served to the client.</p>`,30),l=[a];function p(c,r,i,y,d,u){return s(),n("div",null,l)}const m=e(o,[["render",p]]);export{D as __pageData,m as default};
