import{_ as e,o as s,c as a,X as o}from"./chunks/framework.319defb2.js";const g=JSON.parse('{"title":"Stencil Core CLI API","description":"Stencil Core CLI API","frontmatter":{"description":"Stencil Core CLI API"},"headers":[],"relativePath":"docs/core/cli-api.md","filePath":"docs/core/cli-api.md"}'),t={name:"docs/core/cli-api.md"},n=o('<h1 id="stencil-core-cli-api" tabindex="-1">Stencil Core CLI API <a class="header-anchor" href="#stencil-core-cli-api" aria-label="Permalink to &quot;Stencil Core CLI API&quot;">​</a></h1><p>The CLI API can be found at <code>@stencil/core/cli</code> and ran by <code>bin/stencil</code>.</p><h2 id="createnodelogger" tabindex="-1">createNodeLogger() <a class="header-anchor" href="#createnodelogger" aria-label="Permalink to &quot;createNodeLogger()&quot;">​</a></h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">createNodeLogger</span><span style="color:#A6ACCD;">(process: any): Logger</span></span></code></pre></div><p>Creates a &quot;logger&quot;, based off of NodeJS APIs, that will be used by the compiler and dev-server. By default the CLI uses this method to create the NodeJS logger. The NodeJS &quot;process&quot; object should be provided as the first argument.</p><h2 id="createnodesystem" tabindex="-1">createNodeSystem() <a class="header-anchor" href="#createnodesystem" aria-label="Permalink to &quot;createNodeSystem()&quot;">​</a></h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">createNodeSystem</span><span style="color:#A6ACCD;">(process: any): CompilerSystem</span></span></code></pre></div><p>Creates the &quot;system&quot;, based off of NodeJS APIs, used by the compiler. This includes any and all file system reads and writes using NodeJS. The compiler itself is unaware of Node&#39;s <code>fs</code> module. Other system APIs include any use of <code>crypto</code> to hash content. The NodeJS &quot;process&quot; object should be provided as the first argument.</p><h2 id="parseflags" tabindex="-1">parseFlags() <a class="header-anchor" href="#parseflags" aria-label="Permalink to &quot;parseFlags()&quot;">​</a></h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">parseFlags</span><span style="color:#A6ACCD;">(args: string[]): ConfigFlags</span></span></code></pre></div><p>Used by the CLI to parse command-line arguments into a typed <code>ConfigFlags</code> object. This is an example of how it&#39;s used internally: <code>parseFlags(process.argv.slice(2))</code>.</p><h2 id="run" tabindex="-1">run() <a class="header-anchor" href="#run" aria-label="Permalink to &quot;run()&quot;">​</a></h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">run</span><span style="color:#A6ACCD;">(init: CliInitOptions): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;</span></span></code></pre></div><p>Runs the CLI with the given options. This is used by Stencil&#39;s default <code>bin/stencil</code> file, but can be used externally too.</p><h2 id="runtask" tabindex="-1">runTask() <a class="header-anchor" href="#runtask" aria-label="Permalink to &quot;runTask()&quot;">​</a></h2><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#82AAFF;">runTask</span><span style="color:#A6ACCD;">(process: any</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> config: Config</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> task: TaskCommand</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;">  sys</span><span style="color:#89DDFF;">?:</span><span style="color:#A6ACCD;"> CompilerSystem): </span><span style="color:#FFCB6B;">Promise</span><span style="color:#89DDFF;">&lt;void&gt;</span></span></code></pre></div><p>Runs individual tasks giving a NodeJS <code>process</code>, Stencil <code>config</code>, and task command. You can optionally pass in the <code>sys</code> that&#39;s used by the compiler. See <a href="#createnodesystem">createNodeSystem()</a> for more details.</p>',17),l=[n];function c(r,i,p,d,h,u){return s(),a("div",null,l)}const m=e(t,[["render",c]]);export{g as __pageData,m as default};
