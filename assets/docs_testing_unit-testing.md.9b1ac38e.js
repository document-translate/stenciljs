import{_ as s,o as e,c as n,X as o}from"./chunks/framework.319defb2.js";const u=JSON.parse('{"title":"Unit Testing","description":"Unit Testing","frontmatter":{"description":"Unit Testing"},"headers":[],"relativePath":"docs/testing/unit-testing.md","filePath":"docs/testing/unit-testing.md"}'),t={name:"docs/testing/unit-testing.md"},a=o(`<h1 id="unit-testing" tabindex="-1">Unit Testing <a class="header-anchor" href="#unit-testing" aria-label="Permalink to &quot;Unit Testing&quot;">​</a></h1><p>Stencil makes it easy to unit test components and app utility functions using <a href="https://jestjs.io/" target="_blank" rel="noreferrer">Jest</a>. Unit tests validate the code in isolation. Well written tests are fast, repeatable, and easy to reason about.</p><p>To run unit tests, run <code>stencil test --spec</code>. Files ending in <code>.spec.ts</code> will be executed.</p><h2 id="newspecpage" tabindex="-1">newSpecPage() <a class="header-anchor" href="#newspecpage" aria-label="Permalink to &quot;newSpecPage()&quot;">​</a></h2><p>In order to unit test a component as rendered HTML, tests can use <code>newSpecPage()</code> imported from <code>@stencil/core/testing</code>. This testing utility method is similar to <code>newE2EPage()</code>, however, <code>newSpecPage()</code> is much faster since it does not require a full <a href="https://pptr.dev/" target="_blank" rel="noreferrer">Puppeteer</a> instance to be running. Please see the <a href="./e2e-testing.html">newE2EPage()</a> docs on more information about complete End-to-end testing with Puppeteer.</p><p>Below is a simple example where <code>newSpecPage()</code> is given one component class which was imported, and the initial HTML to use for the test. In this example, when the component <code>MyCmp</code> renders it sets its text content as &quot;Success!&quot;. The matcher <code>toEqualHtml()</code> is then used to ensure the component renders as expected.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSpecPage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core/testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyCmp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../my-cmp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">it</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">should render my component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">page</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">newSpecPage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    components</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">MyCmp</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    html</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">\`</span><span style="color:#C3E88D;">&lt;my-cmp&gt;&lt;/my-cmp&gt;</span><span style="color:#89DDFF;">\`</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">page</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqualHtml</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;my-cmp&gt;Success!&lt;/my-cmp&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><p>The example below uses the template option to test the component</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#676E95;font-style:italic;">// mycmp.spec.tsx</span></span>
<span class="line"><span style="color:#676E95;font-style:italic;">// Since the &#39;template&#39; argument to \`newSpecPage\` is using jsx syntax, this should be in a .tsx file.</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">h</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">newSpecPage</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core/testing</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyCmp</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../my-cmp</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">it</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">should render my component</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">async</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">greeting</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">Hello World</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">page</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;font-style:italic;">await</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">newSpecPage</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    components</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> [</span><span style="color:#A6ACCD;">MyCmp</span><span style="color:#F07178;">]</span><span style="color:#89DDFF;">,</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#82AAFF;">template</span><span style="color:#89DDFF;">:</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">()</span><span style="color:#F07178;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">&lt;</span><span style="color:#FFCB6B;">my-cmp</span><span style="color:#89DDFF;"> </span><span style="color:#C792EA;">greeting</span><span style="color:#89DDFF;">={</span><span style="color:#A6ACCD;">greeting</span><span style="color:#89DDFF;">}&gt;&lt;/</span><span style="color:#FFCB6B;">my-cmp</span><span style="color:#89DDFF;">&gt;,</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">}</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">page</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">root</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toEqualHtml</span><span style="color:#F07178;">(</span><span style="color:#89DDFF;">\`</span></span>
<span class="line"><span style="color:#C3E88D;">    &lt;my-cmp&gt;Hello World&lt;/my-cmp&gt;</span></span>
<span class="line"><span style="color:#C3E88D;">  </span><span style="color:#89DDFF;">\`</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div><h3 id="spec-page-options" tabindex="-1">Spec Page Options <a class="header-anchor" href="#spec-page-options" aria-label="Permalink to &quot;Spec Page Options&quot;">​</a></h3><p>The <code>newSpecPage(options)</code> method takes an options argument to help write tests:</p><table><thead><tr><th>Option</th><th>Description</th></tr></thead><tbody><tr><td><code>components</code></td><td>An array of components to test. Component classes can be imported into the spec file, then their reference should be added to the <code>component</code> array in order to be used throughout the test. <em>Required</em></td></tr><tr><td><code>html</code></td><td>The initial HTML used to generate the test. This can be useful to construct a collection of components working together, and assign HTML attributes. This value sets the mocked <code>document.body.innerHTML</code>.</td></tr><tr><td><code>template</code></td><td>The initial JSX used to generate the test. Use <code>template</code> when you want to initialize a component using their properties, instead of their HTML attributes. It will render the specified template (JSX) into <code>document.body</code>.</td></tr><tr><td><code>autoApplyChanges</code></td><td>By default, any changes to component properties and attributes must call <code>page.waitForChanges()</code> in order to test the updates. As an option, <code>autoApplyChanges</code> continuously flushes the queue in the background. Defaults to <code>false</code></td></tr><tr><td><code>cookie</code></td><td>Sets the mocked <code>document.cookie</code>.</td></tr><tr><td><code>direction</code></td><td>Sets the mocked <code>dir</code> attribute on <code>&lt;html&gt;</code>.</td></tr><tr><td><code>language</code></td><td>Sets the mocked <code>lang</code> attribute on <code>&lt;html&gt;</code>.</td></tr><tr><td><code>referrer</code></td><td>Sets the mocked <code>document.referrer</code>.</td></tr><tr><td><code>supportsShadowDom</code></td><td>Manually set if the mocked document supports Shadow DOM or not. Defaults to <code>true</code></td></tr><tr><td><code>userAgent</code></td><td>Sets the mocked <code>navigator.userAgent</code>.</td></tr><tr><td><code>url</code></td><td>Sets the mocked browser&#39;s <code>location.href</code>.</td></tr></tbody></table><h3 id="spec-page-results" tabindex="-1">Spec Page Results <a class="header-anchor" href="#spec-page-results" aria-label="Permalink to &quot;Spec Page Results&quot;">​</a></h3><p>The returned &quot;page&quot; object from <code>newSpecPage()</code> contains the initial results from the first render. It&#39;s also important to note that the returned page result is a <code>Promise</code>, so for convenience it&#39;s recommended to use async/await.</p><p>The most useful property on the page results would be <code>root</code>, which is for convenience to find the first root component in the document. For example, if a component is nested in many <code>&lt;div&gt;</code> elements, the <code>root</code> property goes directly to the component being tested in order to skip the query selector boilerplate code.</p><table><thead><tr><th>Result</th><th>Description</th></tr></thead><tbody><tr><td><code>body</code></td><td>Mocked testing <code>document.body</code>.</td></tr><tr><td><code>doc</code></td><td>Mocked testing <code>document</code>.</td></tr><tr><td><code>root</code></td><td>The first component found within the mocked <code>document.body</code>. If a component isn&#39;t found, then it&#39;ll return <code>document.body.firstElementChild</code>.</td></tr><tr><td><code>rootInstance</code></td><td>Similar to <code>root</code>, except returns the component instance. If a root component was not found it&#39;ll return <code>null</code>.</td></tr><tr><td><code>setContent(html)</code></td><td>Convenience function to set <code>document.body.innerHTML</code> and <code>waitForChanges()</code>. Function argument should be an html string.</td></tr><tr><td><code>waitForChanges()</code></td><td>After changes have been made to a component, such as a update to a property or attribute, the test page does not automatically apply the changes. In order to wait for, and apply the update, call <code>await page.waitForChanges()</code>.</td></tr><tr><td><code>win</code></td><td>Mocked testing <code>window</code>.</td></tr></tbody></table><h2 id="testing-component-class-logic" tabindex="-1">Testing Component Class Logic <a class="header-anchor" href="#testing-component-class-logic" aria-label="Permalink to &quot;Testing Component Class Logic&quot;">​</a></h2><p>For simple logic only testing, unit tests can instantiate a component by importing the class and constructing it manually. Since Stencil components are plain JavaScript objects, you can create a new component and execute its methods directly.</p><div class="language-typescript"><button title="Copy Code" class="copy"></button><span class="lang">typescript</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">MyToggle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">../my-toggle.tsx</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#82AAFF;">it</span><span style="color:#A6ACCD;">(</span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">should toggle the checked property</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">()</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">=&gt;</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#C792EA;">const</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">toggle</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">new</span><span style="color:#F07178;"> </span><span style="color:#82AAFF;">MyToggle</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">toggle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">checked</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">false</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#A6ACCD;">toggle</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">someMethod</span><span style="color:#F07178;">()</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#82AAFF;">expect</span><span style="color:#F07178;">(</span><span style="color:#A6ACCD;">toggle</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">checked</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">.</span><span style="color:#82AAFF;">toBe</span><span style="color:#F07178;">(</span><span style="color:#FF9CAC;">true</span><span style="color:#F07178;">)</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;">)</span><span style="color:#89DDFF;">;</span></span></code></pre></div>`,19),l=[a];function p(c,r,y,i,d,F){return e(),n("div",null,l)}const m=s(t,[["render",p]]);export{u as __pageData,m as default};
