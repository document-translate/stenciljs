import{_ as e,o as a,c as s,X as t}from"./chunks/framework.319defb2.js";const h=JSON.parse('{"title":"SEO Meta Tags and Static Site Generation","description":"Managing meta tags for SEO and social media embedding in Stencil Static Sites","frontmatter":{"description":"Managing meta tags for SEO and social media embedding in Stencil Static Sites"},"headers":[],"relativePath":"docs/static-site-generation/meta.md","filePath":"docs/static-site-generation/meta.md"}'),n={name:"docs/static-site-generation/meta.md"},o=t(`<h1 id="seo-meta-tags-and-static-site-generation" tabindex="-1">SEO Meta Tags and Static Site Generation <a class="header-anchor" href="#seo-meta-tags-and-static-site-generation" aria-label="Permalink to &quot;SEO Meta Tags and Static Site Generation&quot;">​</a></h1><p>Web Apps need to list detailed meta information about content in order to maximize SEO and provide good social media embed experiences.</p><p>One of the benefits to Stencil&#39;s prerendering is that most DOM apis are available in the NodeJS environment too. For example, to set the document title, simply run <code>document.title = &quot;Page Title&quot;</code>. Similarly, meta tags can be set using standard DOM APIs as found in the browser, such as <code>document.head</code> and <code>document.createElement(&#39;meta&#39;)</code>. For this reason, your component&#39;s runtime can take care of much of this custom work during prerendering.</p><p>That said, the Prerender Config also includes options that allow individual pages to be modified arbitrarily during prerendering. For example, the <code>afterHydrate(document, url)</code> hook can be used to update the parsed <code>document</code> before it is serialized into an HTML string. The <code>document</code> argument is a <a href="https://developer.mozilla.org/en-US/docs/Web/API/Document" target="_blank" rel="noreferrer">standard <code>Document</code></a>, while the <code>url</code> argument is a <a href="https://developer.mozilla.org/en-US/docs/Web/API/URL" target="_blank" rel="noreferrer"><code>URL</code></a> for the location of the page being rendered.</p><p>In the example below, the <code>afterHydrate(document, url)</code> hook is setting the document title from url&#39;s pathname.</p><div class="language-tsx"><button title="Copy Code" class="copy"></button><span class="lang">tsx</span><pre class="shiki material-theme-palenight"><code><span class="line"><span style="color:#89DDFF;font-style:italic;">import</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">PrerenderConfig</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">}</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;font-style:italic;">from</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">&quot;</span><span style="color:#C3E88D;">@stencil/core</span><span style="color:#89DDFF;">&quot;</span><span style="color:#89DDFF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="color:#89DDFF;font-style:italic;">export</span><span style="color:#A6ACCD;"> </span><span style="color:#C792EA;">const</span><span style="color:#A6ACCD;"> config</span><span style="color:#89DDFF;">:</span><span style="color:#A6ACCD;"> </span><span style="color:#FFCB6B;">PrerenderConfig</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">=</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#A6ACCD;">  </span><span style="color:#F07178;">afterHydrate</span><span style="color:#89DDFF;">(</span><span style="color:#A6ACCD;font-style:italic;">document</span><span style="color:#89DDFF;">,</span><span style="color:#A6ACCD;"> </span><span style="color:#A6ACCD;font-style:italic;">url</span><span style="color:#89DDFF;">)</span><span style="color:#A6ACCD;"> </span><span style="color:#89DDFF;">{</span></span>
<span class="line"><span style="color:#F07178;">    </span><span style="color:#A6ACCD;">document</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">title</span><span style="color:#F07178;"> </span><span style="color:#89DDFF;">=</span><span style="color:#F07178;"> </span><span style="color:#A6ACCD;">url</span><span style="color:#89DDFF;">.</span><span style="color:#A6ACCD;">pathname</span><span style="color:#89DDFF;">;</span></span>
<span class="line"><span style="color:#F07178;">  </span><span style="color:#89DDFF;">},</span></span>
<span class="line"><span style="color:#89DDFF;">};</span></span></code></pre></div><h2 id="stencil-helmet" tabindex="-1">@stencil/helmet <a class="header-anchor" href="#stencil-helmet" aria-label="Permalink to &quot;@stencil/helmet&quot;">​</a></h2><p>The <code>@stencil/helmet</code> package was a library for managing meta tags dynamically. It has since been deprecated. For additional information regarding this package, please see its <a href="https://github.com/ionic-team/stencil-helmet" target="_blank" rel="noreferrer">GitHub page</a></p>`,8),l=[o];function r(c,i,p,d,m,D){return a(),s("div",null,l)}const g=e(n,[["render",r]]);export{h as __pageData,g as default};
