import{_ as e,o as t,c as o,X as a}from"./chunks/framework.319defb2.js";const u=JSON.parse('{"title":"Extras","description":"Extras 配置","frontmatter":{"description":"Extras 配置"},"headers":[],"relativePath":"docs/config/extras.md","filePath":"docs/config/extras.md"}'),n={name:"docs/config/extras.md"},i=a('<h1 id="extras" tabindex="-1">Extras <a class="header-anchor" href="#extras" aria-label="Permalink to &quot;Extras&quot;">​</a></h1><p>The <code>extras</code> config contains options to enable new/experimental features in Stencil, add &amp; remove runtime for DOM features that require manipulations to polyfills, etc. For example, not all DOM APIs are fully polyfilled when using the Slot polyfill. Most of these are opt-in, since not all users require the additional runtime.</p><h3 id="appendchildslotfix" tabindex="-1">appendChildSlotFix <a class="header-anchor" href="#appendchildslotfix" aria-label="Permalink to &quot;appendChildSlotFix&quot;">​</a></h3><p>By default, the slot polyfill does not update <code>appendChild()</code> so that it appends new child nodes into the correct child slot like how shadow dom works. This is an opt-in polyfill for those who need it.</p><h3 id="clonenodefix" tabindex="-1">cloneNodeFix <a class="header-anchor" href="#clonenodefix" aria-label="Permalink to &quot;cloneNodeFix&quot;">​</a></h3><p>By default, the runtime does not polyfill <code>cloneNode()</code> when cloning a component that uses the slot polyfill. This is an opt-in polyfill for those who need it.</p><h3 id="experimentalimportinjection" tabindex="-1">experimentalImportInjection <a class="header-anchor" href="#experimentalimportinjection" aria-label="Permalink to &quot;experimentalImportInjection&quot;">​</a></h3><div class="warning custom-block"><p class="custom-block-title">警告</p><p>This flag has been deprecated in favor of <a href="#enableimportinjection"><code>enableImportInjection</code></a>, which provides the same functionality. <code>experimentalImportInjection</code> will be removed in a future major version of Stencil.</p></div><p>In some cases, it can be difficult to lazily load Stencil components in a separate project that uses a bundler such as <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>.</p><p>This is an experimental flag that, when set to <code>true</code>, will allow downstream projects that consume a Stencil library and use a bundler such as Vite to lazily load the Stencil library&#39;s components.</p><p>In order for this flag to work:</p><ol><li>The Stencil library must expose lazy loadable components, such as those created with the <a href="./../output-targets/dist.html"><code>dist</code> output target</a></li><li>The Stencil library must be recompiled with this flag set to <code>true</code></li></ol><p>This flag works by creating dynamic import statements for every lazily loadable component in a Stencil project. Users of this flag should note that they may see an increase in their bundle size.</p><p>Defaults to <code>false</code>.</p><h3 id="enableimportinjection" tabindex="-1">enableImportInjection <a class="header-anchor" href="#enableimportinjection" aria-label="Permalink to &quot;enableImportInjection&quot;">​</a></h3><p>In some cases, it can be difficult to lazily load Stencil components in a separate project that uses a bundler such as <a href="https://vitejs.dev/" target="_blank" rel="noreferrer">Vite</a>.</p><p>Enabling this flag will allow downstream projects that consume a Stencil library and use a bundler such as Vite to lazily load the Stencil library&#39;s components.</p><p>In order for this flag to work:</p><ol><li>The Stencil library must expose lazy loadable components, such as those created with the <a href="./../output-targets/dist.html"><code>dist</code> output target</a></li><li>The Stencil library must be recompiled with this flag set to <code>true</code></li></ol><p>This flag works by creating dynamic import statements for every lazily loadable component in a Stencil project. Users of this flag should note that they may see an increase in their bundle size.</p><p>Defaults to <code>false</code>.</p><h3 id="lifecycledomevents" tabindex="-1">lifecycleDOMEvents <a class="header-anchor" href="#lifecycledomevents" aria-label="Permalink to &quot;lifecycleDOMEvents&quot;">​</a></h3><p>Dispatches component lifecycle events. By default these events are not dispatched, but by enabling this to <code>true</code> these events can be listened for on <code>window</code>. Mainly used for testing.</p><table><thead><tr><th>事件名称</th><th>描述</th></tr></thead><tbody><tr><td><code>stencil_componentWillLoad</code></td><td>Dispatched for each component&#39;s <code>componentWillLoad</code>.</td></tr><tr><td><code>stencil_componentWillUpdate</code></td><td>Dispatched for each component&#39;s <code>componentWillUpdate</code>.</td></tr><tr><td><code>stencil_componentWillRender</code></td><td>Dispatched for each component&#39;s <code>componentWillRender</code>.</td></tr><tr><td><code>stencil_componentDidLoad</code></td><td>Dispatched for each component&#39;s <code>componentDidLoad</code>.</td></tr><tr><td><code>stencil_componentDidUpdate</code></td><td>Dispatched for each component&#39;s <code>componentDidUpdate</code>.</td></tr><tr><td><code>stencil_componentDidRender</code></td><td>Dispatched for each component&#39;s <code>componentDidRender</code>.</td></tr></tbody></table><h3 id="scopedslottextcontentfix" tabindex="-1">scopedSlotTextContentFix <a class="header-anchor" href="#scopedslottextcontentfix" aria-label="Permalink to &quot;scopedSlotTextContentFix&quot;">​</a></h3><p>An experimental flag that when set to <code>true</code>, aligns the behavior of invoking the <code>textContent</code> getter/setter on a scoped component to act more like a component that uses the shadow DOM. Specifically, invoking <code>textContent</code> on a component will adhere to the return values described in <a href="https://developer.mozilla.org/en-US/docs/Web/API/Node/textContent#description" target="_blank" rel="noreferrer">MDN&#39;s article on textContent</a>. Defaults to <code>false</code>.</p><h3 id="scriptdataopts" tabindex="-1">scriptDataOpts <a class="header-anchor" href="#scriptdataopts" aria-label="Permalink to &quot;scriptDataOpts&quot;">​</a></h3><p>It is possible to assign data to the actual <code>&lt;script&gt;</code> element&#39;s <code>data-opts</code> property, which then gets passed to Stencil&#39;s initial bootstrap. This feature is only required for very special cases and rarely needed. When set to <code>false</code> it will not read this data. Defaults to <code>false</code>.</p><h3 id="slotchildnodesfix" tabindex="-1">slotChildNodesFix <a class="header-anchor" href="#slotchildnodesfix" aria-label="Permalink to &quot;slotChildNodesFix&quot;">​</a></h3><p>For browsers that do not support shadow dom (IE11 and Edge 18 and below), slot is polyfilled to simulate the same behavior. However, the host element&#39;s <code>childNodes</code> and <code>children</code> getters are not patched to only show the child nodes and elements of the default slot. Defaults to <code>false</code>.</p>',30),l=[i];function s(d,c,r,h,p,f){return t(),o("div",null,l)}const b=e(n,[["render",s]]);export{u as __pageData,b as default};
